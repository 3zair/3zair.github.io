<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>3zair</title>
    <link>https://3zair.github.io/</link>
    <description>Recent content on 3zair</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
    <lastBuildDate>Thu, 03 Jun 2021 21:04:49 +0800</lastBuildDate><atom:link href="https://3zair.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git常用命令</title>
      <link>https://3zair.github.io/posts/git-%E5%85%A5%E9%97%A8/</link>
      <pubDate>Thu, 03 Jun 2021 21:04:49 +0800</pubDate>
      
      <guid>https://3zair.github.io/posts/git-%E5%85%A5%E9%97%A8/</guid>
      <description>创建分支 1 git checkout -b name //创建并切换分支到name分支 修改分支 假设分支名称为oldName 想要修改为 newName 1. 本地分支重命名(还没有推送到远程) 1 git branch -m oldName newName 2. 远程分支重命名 (已经推送远程-假设本地分支和远程对应分支名称相同) a. 重命名远程分支对应的本地分支 1 git branch -m oldName newName b. 删除远程分支 1 git push --delete origin</description>
    </item>
    
    <item>
      <title>GO开发规范-参考</title>
      <link>https://3zair.github.io/posts/Golang%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</link>
      <pubDate>Thu, 03 Jun 2021 21:04:49 +0800</pubDate>
      
      <guid>https://3zair.github.io/posts/Golang%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</guid>
      <description>Go项目开发规范 命名规范 需要注释来补充的命名就不算是好命名。 使用可搜索的名称：单字母名称和数字常量很难从一大堆文字中搜索出来。单字母名称仅适用于短方法中的本地变量，名称长短应与其作用域相对应。若变量或常量可能在代码中多处使用，则应赋其以便于搜索的名称。 做有意义的区分：Produc</description>
    </item>
    
    <item>
      <title>Go语言异常处理</title>
      <link>https://3zair.github.io/posts/go-%E8%AF%AD%E8%A8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Thu, 03 Jun 2021 21:04:49 +0800</pubDate>
      
      <guid>https://3zair.github.io/posts/go-%E8%AF%AD%E8%A8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>Go语言追求简洁优雅，所以，Go语言不支持传统的 try…catch…finally 这种异常，因为Go语言的设计者们认为，将异常与控制结构混在一起会很容易使得代码变得混乱。因为开发者很容易滥用异常，甚至一个小小的错误都抛出一个异常。在Go语言中，使用多值返回来返回错误。不要用异常代</description>
    </item>
    
    <item>
      <title>Go进阶</title>
      <link>https://3zair.github.io/posts/Go%E8%BF%9B%E9%98%B6/</link>
      <pubDate>Thu, 03 Jun 2021 21:04:49 +0800</pubDate>
      
      <guid>https://3zair.github.io/posts/Go%E8%BF%9B%E9%98%B6/</guid>
      <description>&lt;p&gt;执行顺序、断言问题、map复制&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hello</title>
      <link>https://3zair.github.io/posts/redis/</link>
      <pubDate>Thu, 03 Jun 2021 21:04:49 +0800</pubDate>
      
      <guid>https://3zair.github.io/posts/redis/</guid>
      <description>redis: 1 2 3 4 5 6 7 8 9 set bar 1 # 建立bar的键 keys * # 查看所有的键 exists keyname # 查看键是否存在 del key # 删除键 type # 获取key的类型 get key mset hset expire 缓存层 ：key value mmcahe： key value redis ：数据结构丰富 过期时间：lru lfu 算法 list 双向列表 push pop lpush rpush&amp;hellip; zset ：key（集合） value score（用作排序） 分布式队列</description>
    </item>
    
    <item>
      <title>Linux常用命令</title>
      <link>https://3zair.github.io/posts/linux%E8%BE%BE%E4%BA%BA%E5%85%BB%E6%88%90/</link>
      <pubDate>Thu, 03 Jun 2021 21:04:49 +0800</pubDate>
      
      <guid>https://3zair.github.io/posts/linux%E8%BE%BE%E4%BA%BA%E5%85%BB%E6%88%90/</guid>
      <description>软硬链接： 硬链接：i节点相同， 实际是同一个文件，删除其中一个不影响两外一个，不能跨分区，不能针对目录使用 1 ln xxx aaa 软连接：删除链接不影响源文件，删除原文件不能通过链接访问文件，类似于win快捷方式， 做软连接 源文件地址必须是绝对路径，不写绝对路径默认是别的的是软连接所在目录 1 ln -s xxx aaa</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04采坑</title>
      <link>https://3zair.github.io/posts/ubuntu18.04%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Thu, 03 Jun 2021 21:04:49 +0800</pubDate>
      
      <guid>https://3zair.github.io/posts/ubuntu18.04%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</guid>
      <description>设置软件开机启动 ubuntu18.04不再使用initd管理系统，改用systemd。 使用systemd设置开机启动,为了像以前一样，在/etc/rc.local中设置开机启动程序，需要以下几步： systemd默认读取/etc/systemd/system下的配置文件，该目录下的</description>
    </item>
    
    <item>
      <title>编写易读代码</title>
      <link>https://3zair.github.io/posts/%E7%BC%96%E5%86%99%E6%98%93%E8%AF%BB%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Thu, 03 Jun 2021 21:04:49 +0800</pubDate>
      
      <guid>https://3zair.github.io/posts/%E7%BC%96%E5%86%99%E6%98%93%E8%AF%BB%E4%BB%A3%E7%A0%81/</guid>
      <description>编写易读代码 态度 软件构建的核心就是管理复杂度 代码不仅写给自己看的 代码自解释 不要缩写 宁可名字很长，也要有意义 接口命名也需要自解释 1 2 3 4 5 6 7 8 9 10 11 12 13 14 //错误 var n int var nerr int var n_comp_conns int //正确 var errorNums int //错误 func Get(id int64) resp func List() []resp //正确 func GetById(id int64) func ListAllAlbums() []resp 命名 类型名或者变量名为名词 函数名一般为动词 形</description>
    </item>
    
    <item>
      <title>集合Set实现-Go语言</title>
      <link>https://3zair.github.io/posts/Go%E5%AE%9E%E7%8E%B0set/</link>
      <pubDate>Thu, 03 Jun 2021 21:04:49 +0800</pubDate>
      
      <guid>https://3zair.github.io/posts/Go%E5%AE%9E%E7%8E%B0set/</guid>
      <description>Set实现 练习利用go语言的标准数据类型map实现python语言中的set数据结构 其他语言中，set的底层都是由哈希表(Hash Table)来实现的，go语言拥有作为Hash Table实现的字典Map类型。我们在对Set和Map进行比较之后会发现他们在一些主要特性上是及其相似的</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://3zair.github.io/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://3zair.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://3zair.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://3zair.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
